// Generated by CoffeeScript 1.6.1
(function() {
  var apply, clone, extend, take,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    _this = this;

  this.apply = apply = function(f, args, ctx) {
    if (ctx == null) {
      ctx = null;
    }
    return f.apply(ctx, args);
  };

  this.take = take = function(x, f) {
    f.call(x);
    return x;
  };

  this.kindof = function(x) {
    if (x != null) {
      return x.constructor;
    } else {
      return x;
    }
  };

  this.async = function(f) {
    return function() {
      var $, args, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), $ = arguments[_i++];
      try {
        return $(null, apply(f, args));
      } catch (e) {
        return $(e, null);
      }
    };
  };

  this.extend = extend = function() {
    var base, extras, key, object, _i, _len;
    base = arguments[0], extras = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = extras.length; _i < _len; _i++) {
      object = extras[_i];
      for (key in object) {
        if (!__hasProp.call(object, key)) continue;
        base[key] = object[key];
      }
    }
    return base;
  };

  this.merge = function() {
    var objects;
    objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    objects.unshift({});
    return apply(extend, objects);
  };

  this.dict = function(pairs) {
    if (pairs == null) {
      pairs = [];
    }
    return take({}, function() {
      var pair, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        pair = pairs[_i];
        _results.push(this[pair[0]] = pair[1]);
      }
      return _results;
    });
  };

  this.clone = clone = function(object) {
    if ((object != null) && typeof object === 'object') {
      return take(Object.create(object.constructor.prototype), function() {
        var key, _results;
        _results = [];
        for (key in object) {
          if (!__hasProp.call(object, key)) continue;
          _results.push(this[key] = clone(object[key]));
        }
        return _results;
      });
    } else {
      return object;
    }
  };

  this["export"] = function(host) {
    var key;
    if (host == null) {
      host = global;
    }
    for (key in _this) {
      if (key !== 'export') {
        host[key] = _this[key];
      }
    }
    return _this;
  };

}).call(this);
