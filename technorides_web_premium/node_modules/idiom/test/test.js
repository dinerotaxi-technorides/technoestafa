// Generated by CoffeeScript 1.6.1
(function() {
  var assert,
    __hasProp = {}.hasOwnProperty;

  assert = require('assert');

  require('../lib/idiom')["export"]();

  describe('#take()', function() {
    return it('should run a function in a context and return it', function() {
      var ctx, foo;
      ctx = {};
      foo = function() {
        return this.key = 'value';
      };
      assert(take(ctx, foo) === ctx);
      return assert.equal(ctx.key, 'value');
    });
  });

  describe('#kindof()', function() {
    it('should identify undefined', function() {
      return assert.equal(kindof(void 0), void 0);
    });
    it('should identify null', function() {
      return assert.equal(kindof(null), null);
    });
    it('should identify numbers', function() {
      assert.equal(kindof(1), Number);
      return assert.equal(kindof(0.5), Number);
    });
    it('should identify strings', function() {
      return assert.equal(kindof('foo'), String);
    });
    it('should identify arrays', function() {
      return assert.equal(kindof([]), Array);
    });
    it('should identify plain objects', function() {
      return assert.equal(kindof({}), Object);
    });
    return it('should identify custom classes', function() {
      var Foo, TestClass;
      Foo = TestClass = (function() {

        function TestClass() {}

        return TestClass;

      })();
      return assert.equal(kindof(new Foo), Foo);
    });
  });

  describe('#async()', function() {
    var $, $err, $obj;
    $err = $obj = null;
    $ = function(err, obj) {
      $err = err;
      return $obj = obj;
    };
    it('should forward returns to a callback', function() {
      (async(function() {
        return 8;
      }))($);
      assert.equal($err, null);
      return assert.equal($obj, 8);
    });
    return it('should forward exceptions as errors', function() {
      (async(function() {
        throw 8;
      }))($);
      assert.equal($err, 8);
      return assert.equal($obj, null);
    });
  });

  describe('#extend()', function() {
    var x, y, z;
    x = {
      a: 1,
      b: 2,
      c: 3,
      d: 4
    };
    y = {
      c: 4,
      d: 3,
      e: 2,
      f: 1
    };
    z = extend(x, y);
    it('should return its first argument', function() {
      return assert(x === z);
    });
    it('should copy all own properties', function() {
      var key, _results;
      for (key in x) {
        if (!__hasProp.call(x, key)) continue;
        assert(key in z);
      }
      _results = [];
      for (key in y) {
        if (!__hasProp.call(y, key)) continue;
        _results.push(assert(key in z));
      }
      return _results;
    });
    return it('should override repeated properties', function() {
      var key, _results;
      _results = [];
      for (key in y) {
        if (!__hasProp.call(y, key)) continue;
        _results.push(assert.equal(z[key], y[key]));
      }
      return _results;
    });
  });

  describe('#merge()', function() {
    var x, y, z;
    x = {
      a: 1,
      b: 2,
      c: 3,
      d: 4
    };
    y = {
      c: 4,
      d: 3,
      e: 2,
      f: 1
    };
    z = merge(x, y);
    it('should create new objects', function() {
      return assert(x !== merge(x));
    });
    it('should copy all own properties', function() {
      var key, _results;
      for (key in x) {
        if (!__hasProp.call(x, key)) continue;
        assert(key in z);
      }
      _results = [];
      for (key in y) {
        if (!__hasProp.call(y, key)) continue;
        _results.push(assert(key in z));
      }
      return _results;
    });
    return it('should override repeated properties', function() {
      var key, _results;
      _results = [];
      for (key in y) {
        if (!__hasProp.call(y, key)) continue;
        _results.push(assert.equal(z[key], y[key]));
      }
      return _results;
    });
  });

  describe('#dict()', function() {
    it('should work with no arguments', function() {
      return assert.deepEqual(dict(), {});
    });
    it('should merge key-value pairs into an object', function() {
      var a, key, x, _i, _results;
      x = dict((function() {
        var _i, _results;
        _results = [];
        for (a = _i = 1; _i <= 10; a = ++_i) {
          _results.push([a, a + 3]);
        }
        return _results;
      })());
      _results = [];
      for (key = _i = 1; _i <= 10; key = ++_i) {
        _results.push(assert.equal(x[key], key + 3));
      }
      return _results;
    });
    return it('should override repeated properties', function() {
      var x;
      x = dict([[1, 1], [1, 2], [1, 3]]);
      return assert.equal(x[1], 3);
    });
  });

  describe('#clone()', function() {
    var test;
    test = function(orig) {
      return assert.deepEqual(orig, clone(orig));
    };
    it('should handle undefined', function() {
      return test(void 0);
    });
    it('should handle null', function() {
      return test(null);
    });
    it('should handle numbers', function() {
      return test(10);
    });
    it('should handle strings', function() {
      return test('hello');
    });
    it('should handle arrays', function() {
      var copy, inner, outer;
      inner = [1];
      outer = [1, inner, 2];
      copy = clone(outer);
      assert(copy instanceof Array);
      assert.deepEqual(outer, copy);
      inner.push(2);
      return assert.notDeepEqual(outer, copy);
    });
    return it('should handle objects', function() {
      var copy, inner, outer;
      inner = {
        foo: "bar"
      };
      outer = new function() {
        return this.inner = inner;
      };
      copy = clone(outer);
      assert(copy instanceof outer.constructor);
      assert.deepEqual(outer, copy);
      inner.foo = "baz";
      return assert.notDeepEqual(outer, copy);
    });
  });

}).call(this);
