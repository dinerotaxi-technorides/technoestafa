// Generated by CoffeeScript 1.7.1
(function() {
  var colors, getopts, logging, optimist, parse_headers, server;

  colors = require('colors');

  server = require('../lib/server.js');

  optimist = require('optimist');

  require('idiom')["export"](global);

  getopts = function(usage, desc) {
    var arg, argv;
    optimist.usage(usage);
    argv = optimist.options(desc).argv;
    if (argv.h) {
      optimist.showHelp();
      process.exit();
    }
    for (arg in argv) {
      if (arg in desc) {
        argv[desc[arg].alias] = argv[arg];
      }
    }
    return argv;
  };

  parse_headers = function(headers) {
    var header;
    switch (kindof(headers)) {
      case void 0:
        return {};
      case String:
        return parse_headers([headers]);
      case Array:
        return dict((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = headers.length; _i < _len; _i++) {
            header = headers[_i];
            _results.push(header.split(':'));
          }
          return _results;
        })());
    }
  };

  logging = function(req, res, next) {
    res.on('end', function() {
      var method, status, target;
      method = req.method.bold.green;
      target = req.url;
      status = res.statusCode.toString().bold.red;
      return console.log(method, target, status);
    });
    return next();
  };

  this.start = function() {
    var $;
    process.title = 'serb';
    $ = getopts('serb [options]', {
      h: {
        alias: 'help',
        desc: 'Display this message and exit',
        boolean: true,
        "default": false
      },
      p: {
        alias: 'port',
        desc: 'Port to bind to',
        "default": 8000
      },
      a: {
        alias: 'address',
        desc: 'IP address to bind to',
        "default": 'localhost'
      },
      i: {
        alias: 'index',
        desc: 'Automatically redirect to index.html',
        "default": true,
        boolean: true
      },
      d: {
        alias: 'dirs',
        desc: 'Show directory listings',
        "default": false,
        boolean: true
      },
      e: {
        alias: 'ext',
        desc: 'Assume given extension for URLs lacking one',
        "default": false
      },
      H: {
        alias: 'header',
        desc: 'Set a "name:value" header (repeatable)'
      }
    });
    console.log('Serving at', ($.address + ':' + $.port).green.bold + '...');
    return server.createServer({
      root: $._[0] || '.',
      index: $.index,
      ext: $.ext,
      dirs: $.dirs,
      headers: parse_headers($.header),
      preware: [logging]
    }).listen($.port, $.address);
  };

}).call(this);
